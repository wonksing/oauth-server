// Code generated by MockGen. DO NOT EDIT.
// Source: ./oauth_port.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	moauth "github.com/wonksing/oauth-server/pkg/models/moauth"
)

// MockOAuthCookie is a mock of OAuthCookie interface.
type MockOAuthCookie struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthCookieMockRecorder
}

// MockOAuthCookieMockRecorder is the mock recorder for MockOAuthCookie.
type MockOAuthCookieMockRecorder struct {
	mock *MockOAuthCookie
}

// NewMockOAuthCookie creates a new mock instance.
func NewMockOAuthCookie(ctrl *gomock.Controller) *MockOAuthCookie {
	mock := &MockOAuthCookie{ctrl: ctrl}
	mock.recorder = &MockOAuthCookieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthCookie) EXPECT() *MockOAuthCookieMockRecorder {
	return m.recorder
}

// ClearAccessToken mocks base method.
func (m *MockOAuthCookie) ClearAccessToken(w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAccessToken", w)
}

// ClearAccessToken indicates an expected call of ClearAccessToken.
func (mr *MockOAuthCookieMockRecorder) ClearAccessToken(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAccessToken", reflect.TypeOf((*MockOAuthCookie)(nil).ClearAccessToken), w)
}

// ClearRedirectURI mocks base method.
func (m *MockOAuthCookie) ClearRedirectURI(w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearRedirectURI", w)
}

// ClearRedirectURI indicates an expected call of ClearRedirectURI.
func (mr *MockOAuthCookieMockRecorder) ClearRedirectURI(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRedirectURI", reflect.TypeOf((*MockOAuthCookie)(nil).ClearRedirectURI), w)
}

// ClearReturnURI mocks base method.
func (m *MockOAuthCookie) ClearReturnURI(w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearReturnURI", w)
}

// ClearReturnURI indicates an expected call of ClearReturnURI.
func (mr *MockOAuthCookieMockRecorder) ClearReturnURI(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearReturnURI", reflect.TypeOf((*MockOAuthCookie)(nil).ClearReturnURI), w)
}

// ReadAccessToken mocks base method.
func (m *MockOAuthCookie) ReadAccessToken(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccessToken", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccessToken indicates an expected call of ReadAccessToken.
func (mr *MockOAuthCookieMockRecorder) ReadAccessToken(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccessToken", reflect.TypeOf((*MockOAuthCookie)(nil).ReadAccessToken), r)
}

// ReadRedirectURI mocks base method.
func (m *MockOAuthCookie) ReadRedirectURI(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRedirectURI", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRedirectURI indicates an expected call of ReadRedirectURI.
func (mr *MockOAuthCookieMockRecorder) ReadRedirectURI(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRedirectURI", reflect.TypeOf((*MockOAuthCookie)(nil).ReadRedirectURI), r)
}

// ReadReturnURI mocks base method.
func (m *MockOAuthCookie) ReadReturnURI(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReturnURI", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadReturnURI indicates an expected call of ReadReturnURI.
func (mr *MockOAuthCookieMockRecorder) ReadReturnURI(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReturnURI", reflect.TypeOf((*MockOAuthCookie)(nil).ReadReturnURI), r)
}

// WriteAccessToken mocks base method.
func (m *MockOAuthCookie) WriteAccessToken(w http.ResponseWriter, accessToken string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteAccessToken", w, accessToken)
}

// WriteAccessToken indicates an expected call of WriteAccessToken.
func (mr *MockOAuthCookieMockRecorder) WriteAccessToken(w, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAccessToken", reflect.TypeOf((*MockOAuthCookie)(nil).WriteAccessToken), w, accessToken)
}

// WriteRedirectURI mocks base method.
func (m *MockOAuthCookie) WriteRedirectURI(w http.ResponseWriter, redirectURI string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteRedirectURI", w, redirectURI)
}

// WriteRedirectURI indicates an expected call of WriteRedirectURI.
func (mr *MockOAuthCookieMockRecorder) WriteRedirectURI(w, redirectURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRedirectURI", reflect.TypeOf((*MockOAuthCookie)(nil).WriteRedirectURI), w, redirectURI)
}

// WriteReturnURI mocks base method.
func (m *MockOAuthCookie) WriteReturnURI(w http.ResponseWriter, returnURI string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteReturnURI", w, returnURI)
}

// WriteReturnURI indicates an expected call of WriteReturnURI.
func (mr *MockOAuthCookieMockRecorder) WriteReturnURI(w, returnURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReturnURI", reflect.TypeOf((*MockOAuthCookie)(nil).WriteReturnURI), w, returnURI)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// ClearAccessToken mocks base method.
func (m *MockAuthRepo) ClearAccessToken(w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAccessToken", w)
}

// ClearAccessToken indicates an expected call of ClearAccessToken.
func (mr *MockAuthRepoMockRecorder) ClearAccessToken(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAccessToken", reflect.TypeOf((*MockAuthRepo)(nil).ClearAccessToken), w)
}

// ClearClientRedirectURI mocks base method.
func (m *MockAuthRepo) ClearClientRedirectURI(w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearClientRedirectURI", w)
}

// ClearClientRedirectURI indicates an expected call of ClearClientRedirectURI.
func (mr *MockAuthRepoMockRecorder) ClearClientRedirectURI(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearClientRedirectURI", reflect.TypeOf((*MockAuthRepo)(nil).ClearClientRedirectURI), w)
}

// ClearClientReturnURI mocks base method.
func (m *MockAuthRepo) ClearClientReturnURI(w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearClientReturnURI", w)
}

// ClearClientReturnURI indicates an expected call of ClearClientReturnURI.
func (mr *MockAuthRepoMockRecorder) ClearClientReturnURI(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearClientReturnURI", reflect.TypeOf((*MockAuthRepo)(nil).ClearClientReturnURI), w)
}

// GetAuthStatus mocks base method.
func (m *MockAuthRepo) GetAuthStatus(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthStatus", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthStatus indicates an expected call of GetAuthStatus.
func (mr *MockAuthRepoMockRecorder) GetAuthStatus(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthStatus", reflect.TypeOf((*MockAuthRepo)(nil).GetAuthStatus), r)
}

// GetReturnURI mocks base method.
func (m *MockAuthRepo) GetReturnURI(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReturnURI", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReturnURI indicates an expected call of GetReturnURI.
func (mr *MockAuthRepoMockRecorder) GetReturnURI(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReturnURI", reflect.TypeOf((*MockAuthRepo)(nil).GetReturnURI), r)
}

// GetUserID mocks base method.
func (m *MockAuthRepo) GetUserID(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockAuthRepoMockRecorder) GetUserID(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockAuthRepo)(nil).GetUserID), r)
}

// RedirectToAuthorize mocks base method.
func (m *MockAuthRepo) RedirectToAuthorize(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedirectToAuthorize", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedirectToAuthorize indicates an expected call of RedirectToAuthorize.
func (mr *MockAuthRepoMockRecorder) RedirectToAuthorize(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectToAuthorize", reflect.TypeOf((*MockAuthRepo)(nil).RedirectToAuthorize), w, r)
}

// RedirectToClient mocks base method.
func (m *MockAuthRepo) RedirectToClient(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedirectToClient", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedirectToClient indicates an expected call of RedirectToClient.
func (mr *MockAuthRepoMockRecorder) RedirectToClient(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectToClient", reflect.TypeOf((*MockAuthRepo)(nil).RedirectToClient), w, r)
}

// RedirectToLogin mocks base method.
func (m *MockAuthRepo) RedirectToLogin(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedirectToLogin", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedirectToLogin indicates an expected call of RedirectToLogin.
func (mr *MockAuthRepoMockRecorder) RedirectToLogin(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectToLogin", reflect.TypeOf((*MockAuthRepo)(nil).RedirectToLogin), w, r)
}

// SetAccessToken mocks base method.
func (m *MockAuthRepo) SetAccessToken(w http.ResponseWriter, accessToken string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccessToken", w, accessToken)
}

// SetAccessToken indicates an expected call of SetAccessToken.
func (mr *MockAuthRepoMockRecorder) SetAccessToken(w, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockAuthRepo)(nil).SetAccessToken), w, accessToken)
}

// SetClientRedirectURI mocks base method.
func (m *MockAuthRepo) SetClientRedirectURI(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClientRedirectURI", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClientRedirectURI indicates an expected call of SetClientRedirectURI.
func (mr *MockAuthRepoMockRecorder) SetClientRedirectURI(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientRedirectURI", reflect.TypeOf((*MockAuthRepo)(nil).SetClientRedirectURI), w, r)
}

// SetClientReturnURI mocks base method.
func (m *MockAuthRepo) SetClientReturnURI(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClientReturnURI", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClientReturnURI indicates an expected call of SetClientReturnURI.
func (mr *MockAuthRepoMockRecorder) SetClientReturnURI(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientReturnURI", reflect.TypeOf((*MockAuthRepo)(nil).SetClientReturnURI), w, r)
}

// MockAuthView is a mock of AuthView interface.
type MockAuthView struct {
	ctrl     *gomock.Controller
	recorder *MockAuthViewMockRecorder
}

// MockAuthViewMockRecorder is the mock recorder for MockAuthView.
type MockAuthViewMockRecorder struct {
	mock *MockAuthView
}

// NewMockAuthView creates a new mock instance.
func NewMockAuthView(ctrl *gomock.Controller) *MockAuthView {
	mock := &MockAuthView{ctrl: ctrl}
	mock.recorder = &MockAuthViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthView) EXPECT() *MockAuthViewMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthView) Authorize(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthViewMockRecorder) Authorize(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthView)(nil).Authorize), w, r)
}

// Login mocks base method.
func (m *MockAuthView) Login(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthViewMockRecorder) Login(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthView)(nil).Login), w, r)
}

// MockResourceRepo is a mock of ResourceRepo interface.
type MockResourceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockResourceRepoMockRecorder
}

// MockResourceRepoMockRecorder is the mock recorder for MockResourceRepo.
type MockResourceRepoMockRecorder struct {
	mock *MockResourceRepo
}

// NewMockResourceRepo creates a new mock instance.
func NewMockResourceRepo(ctrl *gomock.Controller) *MockResourceRepo {
	mock := &MockResourceRepo{ctrl: ctrl}
	mock.recorder = &MockResourceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceRepo) EXPECT() *MockResourceRepoMockRecorder {
	return m.recorder
}

// VerifyUserIDPW mocks base method.
func (m *MockResourceRepo) VerifyUserIDPW(userID, userPW string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserIDPW", userID, userPW)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserIDPW indicates an expected call of VerifyUserIDPW.
func (mr *MockResourceRepoMockRecorder) VerifyUserIDPW(userID, userPW interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserIDPW", reflect.TypeOf((*MockResourceRepo)(nil).VerifyUserIDPW), userID, userPW)
}

// MockOAuth2Authorizer is a mock of OAuth2Authorizer interface.
type MockOAuth2Authorizer struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2AuthorizerMockRecorder
}

// MockOAuth2AuthorizerMockRecorder is the mock recorder for MockOAuth2Authorizer.
type MockOAuth2AuthorizerMockRecorder struct {
	mock *MockOAuth2Authorizer
}

// NewMockOAuth2Authorizer creates a new mock instance.
func NewMockOAuth2Authorizer(ctrl *gomock.Controller) *MockOAuth2Authorizer {
	mock := &MockOAuth2Authorizer{ctrl: ctrl}
	mock.recorder = &MockOAuth2AuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2Authorizer) EXPECT() *MockOAuth2AuthorizerMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockOAuth2Authorizer) AddClient(clientID, clientSecret, clientDomain, scope string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", clientID, clientSecret, clientDomain, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClient indicates an expected call of AddClient.
func (mr *MockOAuth2AuthorizerMockRecorder) AddClient(clientID, clientSecret, clientDomain, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockOAuth2Authorizer)(nil).AddClient), clientID, clientSecret, clientDomain, scope)
}

// AuthorizeCode mocks base method.
func (m *MockOAuth2Authorizer) AuthorizeCode(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeCode", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeCode indicates an expected call of AuthorizeCode.
func (mr *MockOAuth2AuthorizerMockRecorder) AuthorizeCode(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeCode", reflect.TypeOf((*MockOAuth2Authorizer)(nil).AuthorizeCode), w, r)
}

// GetClientByID mocks base method.
func (m *MockOAuth2Authorizer) GetClientByID(clientID string) (*moauth.OAuthClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByID", clientID)
	ret0, _ := ret[0].(*moauth.OAuthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByID indicates an expected call of GetClientByID.
func (mr *MockOAuth2AuthorizerMockRecorder) GetClientByID(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByID", reflect.TypeOf((*MockOAuth2Authorizer)(nil).GetClientByID), clientID)
}

// Token mocks base method.
func (m *MockOAuth2Authorizer) Token(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockOAuth2AuthorizerMockRecorder) Token(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockOAuth2Authorizer)(nil).Token), w, r)
}

// ValidateToken mocks base method.
func (m *MockOAuth2Authorizer) ValidateToken(r *http.Request) (string, int64, string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(string)
	ret4, _ := ret[4].(string)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockOAuth2AuthorizerMockRecorder) ValidateToken(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockOAuth2Authorizer)(nil).ValidateToken), r)
}
